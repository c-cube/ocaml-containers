OASISFormat: 0.4
Name:        containers
Version:     0.8
Homepage:    https://github.com/c-cube/ocaml-containers
Authors:     Simon Cruanes
License:     BSD-2-clause
LicenseFile: LICENSE
Plugins:     META (0.3), DevFiles (0.3)
OCamlVersion: >= 4.00.1
BuildTools:  ocamlbuild
AlphaFeatures: compiled_setup_ml, ocamlbuild_more_args

Synopsis:    A modular standard library focused on data structures.
Description:
    Containers is a standard library (BSD license) focused on data structures,
    combinators and iterators, without dependencies on unix. Every module is
    independent and is prefixed with 'CC' in the global namespace. Some modules
    extend the stdlib (e.g. CCList provides safe map/fold_right/append, and
    additional functions on lists).

    It also features an optional library for dealing with strings, and a `misc`
    library full of experimental ideas (not stable, not necessarily usable).

Flag "misc"
  Description:  Build the misc library, with experimental modules still susceptible to change
  Default:      true

Flag "lwt"
  Description:  Build modules which depend on Lwt
  Default:      false

Flag "thread"
  Description:  Build modules that depend on threads
  Default:      true

Flag "bench"
  Description:  Build and run benchmarks
  Default:      true

Flag "bigarray"
  Description:  Build modules that depend on bigarrays
  Default:      true

Flag "advanced"
  Description:  Build advanced combinators, including CCLinq (requires "sequence")
  Default:      true

Library "containers"
  Path:             src/core
  Modules:          CCVector, CCPrint, CCError, CCHeap, CCList, CCOpt, CCPair,
                    CCFun, CCHash, CCInt, CCBool, CCFloat, CCArray, CCRef, CCSet,
                    CCOrd, CCRandom, CCString, CCHashtbl, CCMap, CCFormat
  BuildDepends:     bytes

Library "containers_io"
  Path:             src/io
  Modules:          CCIO
  BuildDepends:     bytes
  FindlibParent:    containers
  FindlibName:      io

Library "containers_sexp"
  Path:             src/sexp
  Modules:          CCSexp, CCSexpStream, CCSexpM
  BuildDepends:     bytes
  FindlibParent:    containers
  FindlibName:      sexp

Library "containers_data"
  Path:             src/data
  Modules:          CCMultiMap, CCMultiSet, CCTrie, CCFlatHashtbl, CCCache,
                    CCPersistentHashtbl, CCDeque, CCFQueue, CCBV, CCMixtbl,
                    CCRingBuffer
  FindlibParent:    containers
  FindlibName:      data

Library "containers_iter"
  Path:             src/iter
  Modules:          CCKTree, CCKList
  FindlibParent:    containers
  FindlibName:      iter

Library "containers_string"
  Path:             src/string
  Pack:             true
  Modules:          KMP, Levenshtein
  FindlibName:      string
  FindlibParent:    containers

Library "containers_advanced"
  Path:             src/advanced
  Pack:             true
  Modules:          CCLinq, CCBatch, CCCat, CCMonadIO
  Build$:           flag(advanced)
  Install$:         flag(advanced)
  FindlibName:      advanced
  FindlibParent:    containers
  BuildDepends:     containers, sequence

Library "containers_bigarray"
  Path:             src/bigarray
  Modules:          CCBigstring
  FindlibName:      bigarray
  FindlibParent:    containers
  BuildDepends:     containers, bigarray, bytes

Library "containers_pervasives"
  Path:             src/pervasives
  Modules:          CCPervasives
  BuildDepends:     containers
  FindlibName:      pervasives
  FindlibParent:    containers

Library "containers_misc"
  Path:             src/misc
  Pack:             true
  Modules:          AbsSet, Automaton, Bij, CSM, Hashset, LazyGraph, PHashtbl,
                    PrintBox, RAL, RoseTree, SmallSet, UnionFind, Univ
  BuildDepends:     containers, containers.data
  FindlibName:      misc
  FindlibParent:    containers

Library "containers_thread"
  Path:             src/threads/
  Modules:          CCFuture, CCLock
  FindlibName:      thread
  FindlibParent:    containers
  Build$:           flag(thread)
  Install$:         flag(thread)
  BuildDepends:     containers, threads
  XMETARequires:    containers, threads

Library "containers_lwt"
  Path:             src/lwt
  Modules:          Lwt_automaton, Lwt_actor, Lwt_klist, Lwt_pipe
  Pack:             true
  FindlibName:      lwt
  FindlibParent:    containers
  Build$:           flag(lwt) && flag(misc)
  Install$:         flag(lwt) && flag(misc)
  BuildDepends:     containers, lwt, containers.misc

Document containers
  Title:                Containers docs
  Type:                 ocamlbuild (0.3)
  BuildTools+:          ocamldoc
  Build$:               flag(docs) && flag(advanced) && flag(bigarray) && flag(lwt) && flag(misc)
  Install:              true
  XOCamlbuildPath:      .
  XOCamlbuildExtraArgs:
    "-docflags '-colorize-code -short-functors -charset utf-8'"
  XOCamlbuildLibraries:
    containers, containers.misc, containers.iter, containers.data,
    containers.string, containers.pervasives, containers.bigarray,
    containers.advanced, containers.io, containers.sexp,
    containers.lwt

Executable run_benchs
  Path:             benchs/
  Install:          false
  CompiledObject:   best
  Build$:           flag(bench) && flag(misc)
  MainIs:           run_benchs.ml
  BuildDepends:     containers, containers.misc, containers.advanced,
                    containers.data, containers.string, containers.iter,
                    sequence, gen, benchmark

Executable bench_hash
  Path: benchs/
  Install: false
  CompiledObject: best
  Build$: flag(bench) && flag(misc)
  MainIs: bench_hash.ml
  BuildDepends: containers, containers.misc

Executable run_test_future
  Path:         tests/threads/
  Install:      false
  CompiledObject: best
  Build$:       flag(tests) && flag(thread)
  MainIs:       run_test_future.ml
  BuildDepends: containers, threads, sequence, oUnit, containers.thread

Test future
  Command:      echo "run test future" ; ./run_test_future.native
  TestTools:    run_test_future
  Run$:         flag(tests) && flag(thread)

PreBuildCommand: make qtest-gen

Executable run_qtest
  Path:             qtest/
  Install:          false
  CompiledObject:   best
  MainIs:           run_qtest.ml
  Build$:           flag(tests) && flag(bigarray)
  BuildDepends:     containers, containers.misc, containers.string, containers.iter,
                    containers.io, containers.advanced, containers.sexp,
                    containers.bigarray,
                    sequence, gen, oUnit, QTest2Lib

Executable run_tests
  Path: tests/
  Install: false
  CompiledObject: best
  MainIs: run_tests.ml
  Build$: flag(tests) && flag(misc)
  BuildDepends: containers, containers.data, oUnit, sequence, gen,
                qcheck, containers.misc, containers.string

Test all
  Command:      make test-all
  TestTools:    run_tests, run_qtest
  Run$:         flag(tests) && flag(misc)

Executable lambda
  Path: examples/
  Install: false
  CompiledObject: best
  MainIs: lambda.ml
  Build$: flag(misc)
  BuildDepends: containers, containers.misc

Executable id_sexp
  Path:             examples/
  Install:          false
  CompiledObject:   best
  MainIs:           id_sexp.ml
  Build$:           flag(misc)
  BuildDepends:     containers.sexp

Executable id_sexp2
  Path:             examples/
  Install:          false
  CompiledObject:   best
  MainIs:           id_sexp2.ml
  Build$:           flag(misc)
  BuildDepends:     containers.sexp

SourceRepository head
  Type: git
  Location: https://github.com/c-cube/ocaml-containers
  Browser: https://github.com/c-cube/ocaml-containers/tree/master/src
